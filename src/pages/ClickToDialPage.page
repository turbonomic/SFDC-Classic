<apex:page showHeader="false" controller="ClickToDialController">
<script>
    // CALL CONFIGURATION
    callFromContactANI = '(212) 842-9900';
    callFromIVRCaseNumber = '00001001';
    basicScreenPopUrl = '/500/e?cas14=Call%20From%20(415)%20555-1212';
    callFromLeadANI = '(434) 369-3100';
    disableSoftphoneInStandardApp = false;
    callLogSubject = 'Call on ';
</script>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
<script type="text/javascript">

    // Callback for screenPop API method.
    var screenPopCallback = function (response) {
        if (response.result) {
            alert(/*'Screen pop was set successfully.' + */response);
        } else {
            alert('Screen pop failed.' + result.error);
        }
    };

    var onCLickTestListener = function(response) {
        if(response.result){
            var json = JSON.parse(response.result);
            var number = json['number'];
            var objectId = json['objectId'];

            alert("user clicked on and these are the details: "+number+"^^^^^^^^^^"+objectId);
        }
    };

    // Callback for onClickToDial API method.
    var onClickListener = function (response) {
        
        if(response.result){
            var json = JSON.parse(response.result);
            var phoneNumber = json['number'];
            var conId = json['objectId'];

            //createTask();
            sforce.interaction.runApex('ClickToDialController','getCallResponseToCreateTask','res='+response.result);
            //sforce.interaction.saveLog('Account','Name=TestAccountName&Phone=4111122323');
        }

        /*var resKey = response.result;
        if (response.result) {
            alert("User clicked on a phone number. The data returned as JSON format is : " + resKey );
        }*/

        //sforce.interaction.runApex('HttpCalloutSample','getCalloutResponseContents','url=http://ep.vmturbo.com:8088/ari/channels?endpoint=PJSIP/1703&app=bridge-dial&timeout=30&api_key=heynow:heynow');
        //sforce.interaction.runApex('HttpCalloutSample','getCallResponse','res='+resKey, screenPopCallback);
        //createTask();
    };

    function setVar(param){
        jquery('[id$=hiddenObjectId]').val(param);
        createTask();
    }

    function call() {
        params = {"PhoneNumber": $("#number").val()};
        //alert("test "+params);
        sforce.interaction.runApex('ClickToDialController','getPhonenumber','phone='+$("#number").val());
    }

    // Registers a callback function that will execute when a user clicks on a phone link.
    //sforce.interaction.cti.onClickToDial(onClickListener);
    //sforce.interaction.cti.onClickToDial(sayHello);
</script>

<style>
html, body {
    height: 100%;
    text-align: center;
    font-size:0.80em;
}

/* Inbound and Outbound icon sprite */
.callDiv{
    width: 20px;
    height: 20px;
    display: inline-table;
    background-image: url({!$Resource.cti_sprite});
}
.inboundCall{
    background-position: -0px -20px;
}
.outboundCall{
    background-position: -0px -40px;
}

.bPageBlock {
    border-top: 4px solid #F8F8F8;
}

.yui3-skin-night table.yui3-datatable-table {
    margin-left: auto !important;
    margin-right: auto !important;
}
.yui3-skin-night .yui3-datatable-cell {
    color: #4A4A56 !important;
    border : 0 !important;
}

/*.yui3-skin-night .yui3-tabview-list,*/ .yui3-skin-night .yui3-widget-hd, .yui3-skin-night .yui3-widget-ft {   
    z-index:1;
    border:1px solid #d5dadc !important;
    border-bottom-color:#8A8C8D !important;
    padding:2px 2px !important;
    background: #ffffff !important;
    background: -moz-linear-gradient(top,  #ffffff 0%, #ededed 100%) !important;
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ffffff), color-stop(100%,#ededed)) !important;
    background: -webkit-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: -o-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: -ms-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    font-size:1em !important;
    background-color:#4A4A56 !important;
}

.yui3-skin-night .yui3-tabview-list {   
    border-top:1px #E0E8E8 !important;
    height:1px !important;
    background: #E0E8E8 !important;
}

.yui3-skin-night .yui3-widget-hd {
    color: #4A4A56 !important;
}

.yui3-skin-night .yui3-tabview-panel {
    background-color:#E0E8E8 !important;
    color: #0a0a0a !important;
}

.yui3-skin-night .yui3-button {
    background-color:#fcfcfc !important;
    color: #0a0a0a !important;
}

.yui3-skin-night .yui3-tabview-list li a {
    background: -webkit-gradient(linear,left bottom,left top,from(#E0E8E8), to(#F1FAFE)) !important;
    background: -moz-linear-gradient(top, #E0E8E8 0%, #F1FAFE 100%) !important;
    color: #4A4A56 !important;
    border: 0 !important;
    border-right : solid 1px #E0E8E8 !important;
    text-shadow: none !important;
}

.yui3-skin-night .yui3-datatable-table {
    z-index:1;
    border:1px solid #d5dadc !important;
    border-bottom-color:#8A8C8D !important;
    padding:2px 2px !important;
    background: #ffffff !important;
    background: -moz-linear-gradient(top,  #ffffff 0%, #ededed 100%) !important;
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#ffffff), color-stop(100%,#ededed)) !important;
    background: -webkit-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: -o-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: -ms-linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    background: linear-gradient(top,  #ffffff 0%,#ededed 100%) !important;
    font-size:1em !important;
    background-color:#4A4A56 !important;    
}

.yui3-skin-night .yui3-datatable-header {
    display : none;
}

.yui3-skin-night .yui3-datatable-message-content {
    background-color: inherit !important;
    color: #4A4A56;
    border-bottom : 0 !important;
}

.yui3-skin-night .yui3-datatable-odd .yui3-datatable-cell {
    background-color: Transparent !important;
}

.yui3-skin-night .yui3-datatable-even .yui3-datatable-cell {
    background-color: Transparent !important;
}

.yui3-skin-night .yui3-widget-stdmod {
    background-color: #E0E8E8 !important;
    color: #4A4A56;
}

</style>

<apex:form style="yui3-tabview-panel">
<apex:actionFunction name="updateStationSetting" action="{!updateStationId}" reRender="StationId"/>
<apex:outputLabel value="Call my: "/>
<apex:outputPanel id="StationId">
    <apex:actionRegion >
        <apex:selectList value="{!selectedStationId}" size="1" onChange="updateStationSetting()">
            <apex:selectOptions value="{!CustomStationIds}"/>
        </apex:selectList>
    </apex:actionRegion>
</apex:outputPanel>
<br/>
<br/>
<apex:actionFunction name="updateCusSetting" action="{!updateCusSettingCallerId}" reRender="CallerId"/>
<apex:outputLabel value="Custom Caller Id: "/>
<apex:outputPanel id="CallerId">
    <apex:actionRegion >
        <apex:selectList value="{!selectCallerId}" size="1" onchange="updateCusSetting()">
            <apex:selectOptions value="{!CustomCallerIds}"/>
        </apex:selectList>
    </apex:actionRegion>
    <br/>
    <br/>
    <h1>The current Caller Id is:<br/><apex:outputLabel value="{!userCusSettingCallerId}"/></h1>
    <br/>
    <br/>
</apex:outputPanel>
</apex:form>
<div id="softphonePanel" style="height:100%;background-color:#E0E8E8;">
    <!--<div id="panelLogin">
        <div class="yui3-widget-bd">
            <form>
            <fieldset>
                <p>
                    <label for="labelUsername">
                        Username</label><br />
                    <input type="text" name="Username" id="inputUsername" placeholder="" />
                </p>
                <p>
                    <label for="labelPassword">
                        Password</label><br />
                    <input type="password" name="Password" id="inputPassword" value="" placeholder="" />
                </p>
                <p>
                    <label for="labelExtension">
                        Extension</label><br />
                    <input type="text" name="Extension" id="inputExtension" value="" placeholder="" />
                </p>
            </fieldset>
            </form>
        </div>
    </div>-->

    <div class="yui3-tabview-panel" style="text-align: center">
        <select id="selectDisposition">
            <option value="readyForCalls">Ready for calls</option>
            <option value="onCall">On call</option>
            <option value="wrapUp">Wrap up</option>
            <option value="lunch">Lunch</option>
        </select>
        <button id="buttonLogout">
            Logout</button>
    </div>
    <div id="callControl">
        <ul>
            <li id="helpTab" style="display:none;"><a href="#linkHelp">Help</a></li>
            <li id="phoneTab" style="display:none;"><a href="#linkPhone">Phone</a></li>
            <!--<li><a href="#linkDial">Dial</a></li>-->
        </ul>
        <div>
            <div id="linkHelp" style="text-align: left;">
                <p> Welcome to the Turbophone Click-to-Call panel!
                <br/><br/> </p>

<p> 1) The Caller ID drop-down can change your ID if needed. </p>

<p> 2) Click on an underlined phone number to call. </p>

<p> 3) When done, a Call Disposition form will appear here. </p>

<p> For any issues, please submit a ticket to the: <a href="https://vmturbo.freshdesk.com/support/tickets/new" target="_blank">Helpdesk</a> </p>
                
                
            </div>
            <div id="linkPhone" style="text-align: center;">
                <div style="vertical-align:super">
                    <div id="divCallData" style="height:100%;display:inline-table;"/>
                    <div style="display:inline-table; padding-left: 10px;">
                        <div id="divDuration"><br/>
                            <span id="spanMinutes" /> : <span id="spanSeconds" />
                        </div>
                    </div>
                </div>
                <div><br/>
                    Enter Call Notes...<br/><br/>
                    <textarea style="overflow:hidden; width:75%;" rows="5" id="inputTextLog" onkeyup="YUI.VisualforceCallControl.handleLogEntry();"/>
                </div>
                <div style="text-align:left; padding-left:25px;"><br/>Call Result:<br/>
                    <div style="display:inline-table">
                        <input type="radio" name="callDisposition" value="Left Voicemail"/> Left Voicemail <br/>
                        <input type="radio" name="callDisposition" value="Left Live Message"/> Left Live Message <br/>
                        <input type="radio" name="callDisposition" value="Connect"/> Connect <br/>
                        <input type="radio" name="callDisposition" value="Conversation"/> Conversation <br/>
                        <input type="radio" name="callDisposition" value="No Answer"/> No Answer <br/>
                    </div>
                    <div style="display:inline-table">
                        <input type="radio" name="callDisposition" value="Set Callback"/> Set Callback <br/>
                        <input type="radio" name="callDisposition" value="Wrong Number"/> Wrong Number <br/>
                        <input type="radio" name="callDisposition" value="Bad Number"/> Bad Number <br/>
                        <input type="radio" name="callDisposition" value="Busy"/> Busy <br/>
                    </div>              
                </div>
                <div style="text-align:left; padding-left:25px;"><br/>Cores:<br/>
                    <div>
                        <input type="number" id="coresCount" value="0" min="1" max="9999"/>
                    </div>
                </div>
                <div style="text-align:left; padding-left:25px;"><br/>CPU Sockets:<br/>
                    <div>
                        <input type="number" id="cpuSocketsCount" value="0" min="1" max="9999"/>
                    </div>
                </div>
                <div style="text-align:left; padding-left:25px;"><br/>Virtual Machines (VMs):<br/>
                    <div>
                        <input type="number" id="vmCount" min="1" value="0" max="9999"/>
                    </div>
                </div>
                <form name="form">
                <div style="text-align:left; padding-left:25px;"><br/>Hypervisor Vendor:<br/>
                    <div>
                    <!--form name="form"-->
                        <select name="HypervisorVendor" id="HypervisorVendor" multiple="multiple">
                            <option value="VMware">VMware</option>
                            <option value="Hyper-V (Microsoft)">Hyper-V (Microsoft)</option>
                            <option value="Xen (Open Source)">Xen (Open Source)</option>
                            <option value="Xen (Citrix)">Xen (Citrix)</option>
                            <option value="KVM (Openstack)">KVM (Openstack)</option>
                            <option value="KVM (Redhat)">KVM (Redhat)</option>
                            <option value="OracleVM">OracleVM</option>
                            <option value="Heterogeneous">Heterogeneous</option>
                            <option value="None">None</option>
                        </select>
                    <!--/form-->
                    </div>              
                </div>
                <div style="text-align:left; padding-left:25px;"><br/>Storage Vendor:<br/>
                    <div>
                    <!--form name="form1"-->
                        <select name="StorageVendor" id="StorageVendor" multiple="multiple">
                            <option value="Atlantis">Atlantis</option>
                            <option value="DataGravity">DataGravity</option>
                            <option value="Dell">Dell</option>
                            <option value="Dell MD Series (NetApp OEM)">Dell MD Series (NetApp OEM)</option>
                            <option value="EMC (Other)">EMC (Other)</option>
                            <option value="EMC (VMAX)">EMC (VMAX)</option>
                            <option value="EMC (VNX)">EMC (VNX)</option>
                            <option value="EMC (VNX-F)">EMC (VNX-F)</option>
                            <option value="Hitachi">Hitachi</option>
                            <option value="HP">HP</option>
                            <option value="HP (3PAR)">HP (3PAR)</option>
                            <option value="HP (Other)">HP (Other)</option>
                            <option value="IBM">IBM</option>
                            <option value="IBM N Series (NetApp OEM)">IBM N Series (NetApp OEM)</option>
                            <option value="NetApp">NetApp</option>
                            <option value="Nimble Storage">Nimble Storage</option>
                            <option value="Oracle">Oracle</option>
                            <option value="Other">Other</option>
                            <option value="Pure Storage">Pure Storage</option>
                            <option value="SolidFire">SolidFire</option>
                            <option value="Tegile">Tegile</option>
                            <option value="Tintri">Tintri</option>
                            <option value="Unknown">Unknown</option>
                            <option value="Violin Memory">Violin Memory</option>
                            <option value="XtremIO">XtremIO</option>
                        </select>
                    <!--/form-->
                    </div>              
                </div>
                <div style="text-align:left; padding-left:25px;"><br/>Call Quality:<br/>
                    <div style="display:inline-table">
                        <input type="radio" name="callQuality" value="Good"/> Good <br/>
                        <input type="radio" name="callQuality" value="Unclear Voice"/> Unclear Voice <br/>
                        <input type="radio" name="callQuality" value="Disconnected"/> Disconnected <br/>
                    </div>             
                </div>
                <div style="vertical-align:super">
                    <div style="display:inline-table; padding-left: 10px;">
                        <div class="endCall"><br/>
                            <button id="buttonEndCall">Save Task</button>
                        </div>
                    </div>
                </div>
                </form>
            </div>
            <!--<div id="linkDial" style="text-align: center;">
                <div>
                    <input type="text" id="number" name="number" placeholder="Enter a phone number to call"/>
                </div>

                <button onclick="call();">
                  Call
                </button>
            </div>-->
        </div>
    </div>
</div>

<audio id="phone_ring_mp3" src="{!$Resource.phone_ring_mp3}" ></audio>
<audio id="phone_dialing_mp3" src="{!$Resource.phone_dialing_mp3}" ></audio> 

<script src="/support/api/37.0/interaction.js"></script>
<script src="/support/console/25.0/integration.js"></script>
<!-- <script src="https://yuicombo.appspot.com/combo?3.5.0/build/yui/yui-min.js"></script> -->
<script src="{!URLFOR($Resource.yuiBuildMin,'build/yui/yui-min.js')}"></script>

<script type="text/javascript">
    // Body skin. Also available yui3-skin-sam
    document.body.className = 'yui3-skin-night';
    document.body.style.margin = 0;  
    
    // STATE VALUES 
    var LOGGED_IN = 'loggedIn';
    var CALL_DETAILS = 'callDetails';
    var ON_CALL = 'onCall';   
    var CALL_START_TIME = 'callStartTime';
    var END_CALL = 'endCall';
    var CALL_LOG = 'callLog';
    var CALLED_TYPE = 'calledType';
    var CALL_NUMBER = 'calledNumber';
    
    // State variables
    var phoneTabIndex = 1;
    var loginPanelWidth = '180px';
    var callStartTime = null;
    var calledType = null;    
    var callNumber = null;    
    
    // Console Flag
    var isInConsole = false;
    
    sforce.interaction.isInConsole(function(response){
        if(!response.result) {
            if (disableSoftphoneInStandardApp) {
                document.body.innerHTML = 'This tool is not available outside the Service Cloud Console.';         
            } else {
                var sheet = document.createElement('style')
                sheet.innerHTML = '.yui3-skin-night .yui3-tabview-list li a {padding: 6px 10px 6px 10px !important;} .yui3-skin-night .yui3-tabview-list {height: 1px !important;} .yui3-skin-night .yui3-widget-bd input {width: 125px !important;}';
                document.body.appendChild(sheet);
                sforce.interaction.cti.setSoftphoneHeight(275);
            }
        } else {
            loginPanelWidth = '250px'; 
            isInConsole = true;
        }
    });
    
    YUI.namespace('VisualforceCallControl');
    
    var demoSoftphone = function(Y) {                   
        var agentDisposition = Y.one('#selectDisposition');            
        var tabview = new Y.TabView({srcNode:'#callControl'});                                 
        tabview.render();
        function disableTab(index, disabled) {
            if (disabled) {
                tabview._items[index].disable();    
            } else {
                tabview._items[index].enable();
            }                        
        }  
        // Disable the phone tab unless there is a call 
        disableTab(phoneTabIndex, true);
        
        // Call duration values
        var minutes = Y.one('#spanMinutes'); 
        var seconds = Y.one('#spanSeconds');
        var timer = null;                    
        
        // Call Log area
        var callLogText = document.getElementById('inputTextLog');
        var callDisposition = document.getElementsByName("callDisposition");
        var coresCount = document.getElementById("coresCount");
        var cpuSocketsCount = document.getElementById("cpuSocketsCount");
        var vmCount = document.getElementById("vmCount");
        var callQuality = document.getElementsByName("callQuality");

        // Login panel for agent credentials. Will show whenever the agent "logs off"
        var loginPanel = new Y.Panel({
            srcNode      : '#panelLogin',
            headerContent: 'Please click on Login to enable Click to dial calls',
            close        : false,
            width        : loginPanelWidth,
            zIndex       : 5,
            centered     : true,
            modal        : true,
            visible      : false,
            render       : true,
            buttons      : [{
                value  : 'Login',
                section: Y.WidgetStdMod.FOOTER,
                action : function (e) {
                    setLocalStorageValue(LOGGED_IN, 'true');
                    this.hide();
                    sforce.interaction.cti.enableClickToDial();
                    sforce.interaction.cti.onClickToDial(clickToDialCallback);                  
                }
            }]
        });
        
                    
        // Audio for call control ring and dial
        var phoneRingAudio = document.getElementById('phone_ring_mp3');
        var phoneDialingAudio = document.getElementById('phone_dialing_mp3');
        
        function renderButton(buttonId, onClickCallback) {
             var button = new Y.Button({
                 id: buttonId, 
                 srcNode:'#' + buttonId,
                 on: {
                     'click' : onClickCallback
                 }                  
             });
             button.render();
             return button;
        }

        // Softphone Logout button
        var buttonLogout = renderButton('buttonLogout', function(e){
            setLocalStorageValue(LOGGED_IN, 'false');
            loginPanel.show();
            sforce.interaction.cti.disableClickToDial();
        });

        function processEndCall() {
            if(timer) {
                timer.cancel();
            }
            tabview.selectChild(0);         
            agentDisposition.getDOMNode().value = 'readyForCalls';
            agentDisposition.getDOMNode().disabled = false;
            buttonLogout.enable();
            buttonEndCall.disable();
            disableTab(phoneTabIndex, true);            
        }
        
        function responseAnalysis(response) {
            alert(response.result);
        }

        function saveLog(response) {
            var timeStamp = new Date().toString();
            timeStamp = timeStamp.substring(0, timeStamp.lastIndexOf(':') + 3);             
            var currentDate = new Date();           
            var currentDay = currentDate.getDate();
            var currentMonth = currentDate.getMonth()+1;
            var currentYear = currentDate.getFullYear();
            var hypervisorVendor = processMultiselect(document.forms.form.HypervisorVendor);
            var storageVendor = processMultiselect(document.forms.form.StorageVendor);
            
            var dueDate = currentYear+ '-' + currentMonth + '-' + currentDay;
            var saveParams = 'Subject=' + callLogSubject + timeStamp;
            saveParams += '&Status=Completed';                 
            saveParams += '&CallType=' + calledType;
            saveParams += '&Activitydate=' + dueDate;
            //saveParams += '&Call_Disposition__c='+callDisposition.value;
            saveParams += '&CallObject=' + currentDate.getTime();
            saveParams += '&Phone=' + callNumber;   
            saveParams += '&Description=' + callLogText.value;
            
            if(coresCount.value > 0){
                saveParams += '&Cores__c='+coresCount.value;
            }
            if(cpuSocketsCount.value > 0){
                saveParams += '&CPU_Sockets__c=' + cpuSocketsCount.value;
            }
            if(vmCount.value > 0){
                saveParams += '&Virtual_Machines_VMs__c=' + vmCount.value;
            }
            //saveParams += '&RecordTypeId=0124E0000000A19QAE';  
            var callDisposition = getSelectedCallDisposition();
            if(callDisposition) {
                saveParams += '&Call_Disposition__c=' + callDisposition.value;       
            } 
            
            var callQuality = getSelectedCallQuality();
            if(callQuality) {
                saveParams += '&CallQuality__c=' + callQuality.value;
            }                     
            
            saveParams += '&CallDurationInSeconds=' + Math.floor((currentDate.getTime() - callStartTime)/ 1000);

            if(hypervisorVendor){
                saveParams += '&Hypervisor_Vendor__c=' + hypervisorVendor;
            }

            if(storageVendor){
                saveParams += '&Storage_Vendor__c=' + storageVendor;
            }
            
            var result = JSON.parse(response.result);
            if(result.objectId.substr(0,3) == '003' || result.objectId.substr(0,3) == '00Q') {
                saveParams += '&whoId=' + result.objectId;                    
            } else {
                saveParams += '&whatId=' + result.objectId;            
            }
            //alert(result.objectId);
            //alert(response);
            //alert(saveParams);
            var clickToDialTaskLog = 'SaveParams__c='+saveParams.replace(/&/g, '||');

            sforce.interaction.saveLog('ClickToDialTaskLog__c', clickToDialTaskLog);
            sforce.interaction.saveLog('Task', saveParams, callBack);
            //sforce.interaction.saveLog('Account', 'Name=NewAccountName&Phone=4155551212&SQL_Databases_Detail__c=TestAccountData');      
        }
    
        // End call button
        var buttonEndCall = renderButton('buttonEndCall', function(e){
            processEndCall();
            setLocalStorageValue(END_CALL, (new Date().getTime()));
            removeLocalStorageValue(ON_CALL);
            removeLocalStorageValue(CALL_START_TIME);
            removeLocalStorageValue(CALLED_TYPE);
            removeLocalStorageValue(CALL_NUMBER);
            sforce.interaction.getPageInfo(saveLog);
        });
                
        buttonEndCall.disable();
        
        // Clean number formatting
        function cleanFormatting(number) {        
            return number.replace(' ','').replace('-','').replace('(','').replace(')','');
        }

        function processMultiselect(InvForm) {
            var SelBranchVal = "";
            var x = 0;
            for (x=0;x<InvForm.length;x++)
                {
                    if(InvForm[x].selected)
                    {
                     //alert(InvForm.kb[x].value);
                     SelBranchVal = InvForm[x].value + ";" + SelBranchVal ;
                    }

                    if(x==InvForm.length){
                        SelBranchVal = SelBranchVal.substring(0, InvForm.length-1)
                    }
                }
            return SelBranchVal;
        }
        
        // Get selected call disposition
        function getSelectedCallDisposition() {        
            for(var i=0;i<callDisposition.length;i++) {
                if (callDisposition[i].checked) {
                    return callDisposition[i];
                }                
            }
        }
        
        function getSelectedCallQuality() {        
            for(var i=0;i<callQuality.length;i++) {
                if (callQuality[i].checked) {
                    return callQuality[i];
                }                
            }
        }
        
        // Local storage persistence 
        function setLocalStorageValue(name,value){
            localStorage.setItem(name, value);
        }
        
        function getLocalStorageValue(name){
            return localStorage.getItem(name);
        }
        
        function setLocalStorageObject(key, value) {
            setLocalStorageValue(key, JSON.stringify(value));
        }
        
        function getLocalStorageObject(key) {
            var value = getLocalStorageValue(key);
            return value && JSON.parse(value);
        }
        
        function removeLocalStorageValue(key) {
            localStorage.removeItem(key);
        }
        
        // Methods for calculating the call duration                
        function increaseSeconds() {
            var elapsed = new Date().getTime() - callStartTime;     
            var secondsElapsed = Math.floor(((elapsed / 1000)));
            var minutesElapsed = Math.floor (secondsElapsed/60);
            secondsElapsed = secondsElapsed % 60;                                   
            seconds.set('innerHTML', secondsElapsed);
            minutes.set('innerHTML', minutesElapsed);            
        }
        
        function startCallDuration() {
            minutes.set('innerHTML', '00');
            seconds.set('innerHTML', '00');
            //increaseSeconds();
            timer = Y.later(1000, null, increaseSeconds, [], true);
        }
        
        // Methods for call initiation
        function screenPop(objectId) {
            //sforce.interaction.searchAndScreenPop('/'+objectId,false);  
            sforce.interaction.screenPop('/'+objectId,false); 
        }
        
        function setupCall() {
            startCallDuration();        
            disableTab(phoneTabIndex, false);
            // Select phone tab                           
            tabview.selectChild(phoneTabIndex);            
            agentDisposition.getDOMNode().value = 'onCall';
            agentDisposition.getDOMNode().disabled = true;  
            buttonLogout.disable();
            buttonEndCall.enable();
        }
        
        function startCall(number, callType) {
            callStartTime = new Date().getTime();
            setLocalStorageObject(CALL_START_TIME, callStartTime);            
            setLocalStorageValue(ON_CALL, 'true');
            var tempNumber = number.replace(/[^0-9]/g,'')
            if (!number) {
                callNumber = cleanFormatting(callFromContactANI);
            } else {
                callNumber = cleanFormatting(tempNumber);
            }            
            setLocalStorageValue(CALL_NUMBER, tempNumber);
            setupCall();
            if (!callType) {
                //phoneRingAudio.play();
                //calledType = 'Inbound';
                sforce.interaction.runApex('ClickToDialController','getCallResponse','phoneNumber='+number);
            } else {
                sforce.interaction.runApex('ClickToDialController','getCallResponse','phoneNumber='+number);
                //phoneDialingAudio.play();
                //calledType = 'Outbound';
            }
            setLocalStorageObject(CALLED_TYPE, calledType);
        }
                        
        function startCallAndScreenPop(number, objectId, callType){
            screenPop(objectId);        
            startCall(number, callType);   
        }                                      
        
        function createTableRow(name, value){
            var row = new Object();
            row.name = name;
            row.value = value;
            return row;
        }
        
        function renderTable(data) {
            var tableDiv = Y.one('#divCallData');
            tableDiv.set('innerHTML', ''); 
            var table = new Y.DataTable({
                columns: [
                {key: 'name', label:'Name'}, 
                {key: 'value', label:'Value'}
                ],
                data: data,
    
                // Optionally configure table with a caption
                caption: 'Call Data',
            });            
            table.render('#divCallData');
            if (data.length == 0) {
                table.showMessage('No Results Found for ' + callBackSearchParam + '.');
            }           
        }
        
        // Phone panel display 
        function createTable(data){
            setLocalStorageObject(CALL_DETAILS, data);
            renderTable(data);
            // Clear call log area
            clearCallLog();
        }
        
        // Call backs and phone and salesforce interaction
        YUI.VisualforceCallControl.callFromNumber = function (name, number) {
            var data= [];
            data[0] = createTableRow('Caller', name);
            data[1] = createTableRow('Number', number);
            data[2] = createTableRow('Dialed Number', '1(800)555-1212'); 
            createTable(data);                 
            startCallAndScreenPop(number);
        }
        
        YUI.VisualforceCallControl.callToNumber = function (name, number) {
            var data= [];
            data[0] = createTableRow('Caller', name);
            data[1] = createTableRow('Number', number);
            createTable(data);      
            startCallAndScreenPop(number);           
        }
        
        function clickToDialCallback(response) {
            sforce.interaction.setVisible(true);  
            var result = JSON.parse(response.result);
            var data= [];
            var phone = result.number.replace(/[^(0-9,"+","x")]/g,'');
            data[0] = createTableRow('Caller', result.objectName.replace('+', ' '));
            data[1] = createTableRow('Type', result.object);
            data[2] = createTableRow('Number', result.number);
            data[3] = createTableRow('Record Id', result.objectId);            
            createTable(data);
            //sforce.interaction.runApex('HttpCalloutSample','getCallResponse','phoneNumber='+result.number);   
            startCallAndScreenPop(phone, result.objectId, 'OUTBOUND');             
        }

        var callBackSearchParam = '';
        YUI.VisualforceCallControl.shortcutHandler = function(event) {
            // Shift-q call from Contact
            if (event.shiftKey && event.which == 81) {
                sforce.interaction.runApex('SoftphoneSearchController','getContacts','ANI=' + callFromContactANI, runApexCallback);      
                callBackSearchParam = cleanFormatting(callFromContactANI);
            }
            // Shift-w call from case
            if (event.shiftKey && event.which == 87) {
                sforce.interaction.runApex('SoftphoneSearchController','getCases','caseNumber=' + callFromIVRCaseNumber, runApexCaseCallback);      
                callBackSearchParam = callFromIVRCaseNumber;
            }
            // Shift-e basic screen pop
            if (event.shiftKey && event.which == 69) {
                sforce.interaction.screenPop(basicScreenPopUrl);
            }
            // Shift-r call from lead
            if (event.shiftKey && event.which == 82) {
                sforce.interaction.runApex('SoftphoneSearchController','getLeads','ANI=' + callFromLeadANI, runApexCallback);      
                callBackSearchParam = cleanFormatting(callFromLeadANI);
            }     
            // Shift-y call from case
            if (event.shiftKey && event.which == 89) {
                sforce.interaction.searchAndScreenPop(callFromIVRCaseNumber,'ANI=4155551212&DNIS=18005551212','Inbound');      
            }   
                  
        }        

        function runApexCallback(response) {
            var result = JSON.parse(response.result);
            var data= [];
            var i = 0;
            for(var attribute in result) {
                if(result.hasOwnProperty(attribute)) {
                    var objectData = result[attribute];
                    for(var objectField in objectData) {
                        if(objectData.hasOwnProperty(objectField) && objectField != 'attributes' && objectField != 'Id') {
                            data[i++] = createTableRow(objectField, objectData[objectField]);
                        }
                    }
                }
            }
            createTable(data);      
            startCallAndScreenPop(callBackSearchParam); 
        }
        
        function runApexCaseCallback(response) {
            var result = JSON.parse(response.result);
            var data= [];
            var i = 0;
            var bookmarkableURL = '/ui/support/servicedesk/ServiceDeskPage#';
            var focusedTab = '';
            for(var attribute in result) {
                if(result.hasOwnProperty(attribute)) {
                    var caseData = result[attribute];
                    for(var caseField in caseData) {
                        if(caseData.hasOwnProperty(caseField) && caseField != 'attributes') {
                            if (caseField == 'Id' || caseField == 'ContactId' || caseField == 'AccountId') {
                                if (caseField == 'Id') {
                                    focusedTab = '/' + caseData[caseField];
                                }
                                bookmarkableURL += '/' + caseData[caseField] + '|';
                            } else {
                                data[i++] = createTableRow(caseField, caseData[caseField]);
                            }
                        }
                    }
                }
            }
            createTable(data);      
            startCall();
            if (bookmarkableURL === '/ui/support/servicedesk/ServiceDeskPage#') {
                return;
            }
            bookmarkableURL += '|' + focusedTab;
            if (!isInConsole) {
                bookmarkableURL = focusedTab;
            }            
            sforce.interaction.screenPop(bookmarkableURL);                               
        }
        
        function clearCallLog() {
            callLogText.value = '';  
            removeLocalStorageValue(CALL_LOG);          
            getSelectedCallDisposition.checked = false;
        }
        
        YUI.VisualforceCallControl.handleLogEntry = function() {
            setLocalStorageValue(CALL_LOG, callLogText.value);
        }
                        
        if(getLocalStorageValue(LOGGED_IN)==null || getLocalStorageValue(LOGGED_IN)=='false') {
            loginPanel.show();
        }
        sforce.interaction.cti.onClickToDial(clickToDialCallback); 
        
        function processLocalStorageStartCall() {
            onCallData = getLocalStorageObject(CALL_DETAILS);
            callStartTime = getLocalStorageObject(CALL_START_TIME);
            calledType = getLocalStorageObject(CALLED_TYPE);
            callNumber = getLocalStorageObject(CALL_NUMBER);
            setupCall();
        }
        
        var onCallData = getLocalStorageObject(CALL_DETAILS);
        if(onCallData!==null) {
            renderTable(onCallData);
            if (getLocalStorageValue(ON_CALL) != null) {
                processLocalStorageStartCall();
            }
        }
        
        callLogText.value = getLocalStorageValue(CALL_LOG);

        function storageEventHandler(e){
            if (e.key == END_CALL) {
                processEndCall();
            } else if (e.key == ON_CALL && e.newValue=='true') {
                processLocalStorageStartCall();                
            } else if (e.key == CALL_LOG) {
                callLogText.value = e.newValue;                
            }
        }        
        window.addEventListener('storage', storageEventHandler, false);
        
        var callBack = function(response){
            if(response.result){
                clearCallLog();
                //alert(response.result);
            } else {
                alert(response.error);
            }
        }
    };
    YUI({skin: 'night'}).use(
        'tabview', 
        'button', 
        'datatable',
        'node', 
        'panel',
        demoSoftphone
    ); 
    //window.onkeypress = function(event) {YUI.VisualforceCallControl.shortcutHandler(event);};
    
</script>      
</apex:page>